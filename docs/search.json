[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 funr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Imad EL BADISY. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"EL BADISY (2025). funr: Functional programming parallelism progress track support. R package version 0.5.0.","code":"@Manual{,   title = {funr: Functional programming with parallelism and progress track support},   author = {Imad {EL BADISY}},   year = {2025},   note = {R package version 0.5.0}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"funr lightweight toolkit functional programming R built-support parallelism progress bars. extends base R’s functional tools consistent, minimal API mapping, walking, reducing, cross-validating, repeating computations across lists, data frames, grouped data.","code":""},{"path":[]},{"path":[]},{"path":"/index.html","id":"why-no-formula-interface-like--x--y","dir":"","previous_headings":"","what":"Why no formula interface like ~ .x + .y?","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"funr draws inspiration purrr, intentionally avoids supporting formula-based anonymous function syntax (e.g., ~ .x + 1) now. decision based : Keeping dependencies minimal (reliance rlang) Avoiding non-standard evaluation can confuse new users Encouraging explicit, readable code using function(x) { ... } style may consider adding tidy evaluation support (e.g., quosures rlang::as_function) future release. However, current philosophy favors clarity simplicity.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"# install.packages(\"funr\") # when available #remotes::install_github(\"ielabdisy/funr\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"library(funr) library(purrr) library(furrr) #> Loading required package: future library(pbapply) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(rsample)  plan(multisession)  # utility to compare results compare_outputs <- function(label, x, y) {   cat(\"\\n\", label, \"->\", if (identical(x, y)) \"dentical\\n\" else if (isTRUE(all.equal(x, y))) \"nearly equal\\n\" else \"different\\n\") }  # strip names and convert to plain numeric vector as_vec <- function(x) as.numeric(unlist(x, use.names = FALSE))"},{"path":"/index.html","id":"element-wise-map","dir":"","previous_headings":"Examples","what":"Element-wise map","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- fmap(1:5, function(x) x^2) x2 <- lapply(1:5, function(x) x^2) x3 <- map(1:5, ~ .x^2) x4 <- future_map(1:5, ~ .x^2) x5 <- pblapply(1:5, function(x) x^2) compare_outputs(\"Element-wise: base\", x1, x2) #>  #>  Element-wise: base -> dentical compare_outputs(\"Element-wise: purrr\", x1, x3) #>  #>  Element-wise: purrr -> dentical compare_outputs(\"Element-wise: furrr\", x1, x4) #>  #>  Element-wise: furrr -> dentical compare_outputs(\"Element-wise: pbapply\", x1, x5) #>  #>  Element-wise: pbapply -> dentical"},{"path":"/index.html","id":"multi-input-map","dir":"","previous_headings":"","what":"Multi-input map","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- fmapn(list(1:3, 4:6), function(x, y) x + y) x2 <- Map(`+`, 1:3, 4:6) x3 <- pmap(list(1:3, 4:6), ~ ..1 + ..2) x4 <- future_pmap(list(1:3, 4:6), ~ ..1 + ..2) compare_outputs(\"Multi-input: base\", x1, x2) #>  #>  Multi-input: base -> dentical compare_outputs(\"Multi-input: purrr\", x1, x3) #>  #>  Multi-input: purrr -> dentical compare_outputs(\"Multi-input: furrr\", x1, x4) #>  #>  Multi-input: furrr -> dentical"},{"path":"/index.html","id":"row-wise-map","dir":"","previous_headings":"Multi-input map","what":"Row-wise map","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- fmapr(mtcars, function(row) row$mpg + row$cyl) rowlist <- lapply(seq_len(nrow(mtcars)), function(i) as.list(mtcars[i, ])) x2 <- lapply(rowlist, function(row) row$mpg + row$cyl) x3 <- map(rowlist, function(row) row$mpg + row$cyl) compare_outputs(\"Row-wise: base\", as_vec(x1), as_vec(x2)) #>  #>  Row-wise: base -> dentical compare_outputs(\"Row-wise: purrr\", as_vec(x1), as_vec(x3)) #>  #>  Row-wise: purrr -> dentical"},{"path":"/index.html","id":"column-wise-map","dir":"","previous_headings":"Multi-input map","what":"Column-wise map","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- fmapc(mtcars, function(col, name) mean(col)) x2 <- sapply(mtcars, mean) x3 <- imap(mtcars, ~ mean(.x)) x4 <- future_imap(mtcars, ~ mean(.x)) compare_outputs(\"Column-wise: base\", x1, as.list(x2)) #>  #>  Column-wise: base -> dentical compare_outputs(\"Column-wise: purrr\", x1, x3) #>  #>  Column-wise: purrr -> dentical compare_outputs(\"Column-wise: furrr\", x1, x4) #>  #>  Column-wise: furrr -> dentical"},{"path":"/index.html","id":"group-wise-map","dir":"","previous_headings":"Multi-input map","what":"Group-wise map","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- fmapg(iris, function(df) colMeans(df[1:4]), by = \"Species\") x2 <- lapply(split(iris, iris$Species), function(df) colMeans(df[1:4])) x3 <- map(split(iris, iris$Species), ~ colMeans(.x[1:4])) x4 <- future_map(split(iris, iris$Species), ~ colMeans(.x[1:4])) compare_outputs(\"Group-wise: base\", x1, x2) #>  #>  Group-wise: base -> dentical compare_outputs(\"Group-wise: purrr\", x1, x3) #>  #>  Group-wise: purrr -> dentical compare_outputs(\"Group-wise: furrr\", x1, x4) #>  #>  Group-wise: furrr -> dentical"},{"path":"/index.html","id":"side-effect-map","dir":"","previous_headings":"Multi-input map","what":"Side-effect map","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"cat(\"\\nSide-effects:\\n\") #>  #> Side-effects: fwalk(1:3, print) #> [1] 1 #> [1] 2 #> [1] 3"},{"path":"/index.html","id":"general-purpose-loop-with-return-values","dir":"","previous_headings":"Multi-input map","what":"General-purpose loop with return values","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- floop(1:5, function(x) x^2, .capture = TRUE) x2 <- lapply(1:5, function(x) x^2) x3 <- {   out <- list()   for (i in 1:5) out[[i]] <- i^2   out } compare_outputs(\"floop() vs lapply()\", x1, x2) #>  #>  floop() vs lapply() -> dentical compare_outputs(\"floop() vs for()\", x1, x3) #>  #>  floop() vs for() -> dentical"},{"path":"/index.html","id":"general-purpose-loop-side-effect-only","dir":"","previous_headings":"Multi-input map","what":"General-purpose loop (side-effect only)","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"cat(\"\\nGeneral-purpose loop (side-effects):\\n\") #>  #> General-purpose loop (side-effects): floop(1:3, function(x) cat(\"floop says:\", x, \"\\n\"), pb = TRUE, .capture = FALSE) #>  |                                                  |   0% elapsed=00h 00m 00s, remaining~...floop says: 1  #>  |================                                  |  33% elapsed=00h 00m 00s, remaining~00h 00m 00sfloop says: 2  #>  |=================================                 |  67% elapsed=00h 00m 00s, remaining~00h 00m 00sfloop says: 3  #>  |==================================================| 100% elapsed=00h 00m 00s, remaining~00h 00m 00s cat(\"for-loop equivalent:\\n\") #> for-loop equivalent: for (x in 1:3) cat(\"for says:\", x, \"\\n\") #> for says: 1  #> for says: 2  #> for says: 3"},{"path":"/index.html","id":"cross-validation","dir":"","previous_headings":"Multi-input map","what":"Cross-validation","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"splits <- vfold_cv(iris, v = 3)$splits fit_model <- function(split) mean(analysis(split)$Sepal.Length) x1 <- fcv(splits, fit_model) x2 <- lapply(splits, fit_model) compare_outputs(\"CV map: base\", x1, x2) #>  #>  CV map: base -> dentical"},{"path":"/index.html","id":"repeat-simulation","dir":"","previous_headings":"Multi-input map","what":"Repeat simulation","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- frepeat(times = 10, expr = rnorm(1)) x2 <- as.list(replicate(10, rnorm(1))) x3 <- as.list(pbreplicate(10, rnorm(1))) cat(\"\\nRepeat: Results not comparable (randomized output)\\n\") #>  #> Repeat: Results not comparable (randomized output)"},{"path":"/index.html","id":"reduce","dir":"","previous_headings":"Multi-input map","what":"Reduce","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- freduce(1:5, `+`) x2 <- Reduce(`+`, 1:5) x3 <- reduce(1:5, `+`) compare_outputs(\"Reduce: base\", x1, x2) #>  #>  Reduce: base -> dentical compare_outputs(\"Reduce: purrr\", x1, x3) #>  #>  Reduce: purrr -> dentical"},{"path":"/index.html","id":"compose","dir":"","previous_headings":"Multi-input map","what":"Compose","title":"funr: Functional Mapping with Parallelism and Progress Bars","text":"","code":"x1 <- fcompose(sqrt, abs)(-4) x2 <- (function(x) sqrt(abs(x)))(-4) x3 <- compose(sqrt, abs)(-4) compare_outputs(\"Compose: base\", x1, x2) #>  #>  Compose: base -> dentical compare_outputs(\"Compose: purrr\", x1, x3) #>  #>  Compose: purrr -> dentical"},{"path":"/reference/fapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over a list or vector with optional parallelism and progress — fapply","title":"Apply a function over a list or vector with optional parallelism and progress — fapply","text":"Applies function `.f` element `.x`, using optional parallel computation progress bar tracking. Designed parallel-compatible replacement `lapply()`.","code":""},{"path":"/reference/fapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over a list or vector with optional parallelism and progress — fapply","text":"","code":"fapply(.x, .f, ncores = 1, pb = FALSE, ...)"},{"path":"/reference/fapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over a list or vector with optional parallelism and progress — fapply","text":".x list atomic vector elements iterate . list, coerced. .f function apply element `.x`. Can function string naming function. ncores Integer. Number cores use parallel processing. Default `1` (sequential). pb Logical. Whether display progress bar. Default `FALSE`. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/fapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function over a list or vector with optional parallelism and progress — fapply","text":"list results obtained applying `.f` element `.x`. result always list.","code":""},{"path":"/reference/fapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function over a list or vector with optional parallelism and progress — fapply","text":"","code":"slow_fn <- function(x) { Sys.sleep(0.01); x^2 } x <- 1:100  # Sequential without progress fapply(x, slow_fn) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 9 #>  #> [[4]] #> [1] 16 #>  #> [[5]] #> [1] 25 #>  #> [[6]] #> [1] 36 #>  #> [[7]] #> [1] 49 #>  #> [[8]] #> [1] 64 #>  #> [[9]] #> [1] 81 #>  #> [[10]] #> [1] 100 #>  #> [[11]] #> [1] 121 #>  #> [[12]] #> [1] 144 #>  #> [[13]] #> [1] 169 #>  #> [[14]] #> [1] 196 #>  #> [[15]] #> [1] 225 #>  #> [[16]] #> [1] 256 #>  #> [[17]] #> [1] 289 #>  #> [[18]] #> [1] 324 #>  #> [[19]] #> [1] 361 #>  #> [[20]] #> [1] 400 #>  #> [[21]] #> [1] 441 #>  #> [[22]] #> [1] 484 #>  #> [[23]] #> [1] 529 #>  #> [[24]] #> [1] 576 #>  #> [[25]] #> [1] 625 #>  #> [[26]] #> [1] 676 #>  #> [[27]] #> [1] 729 #>  #> [[28]] #> [1] 784 #>  #> [[29]] #> [1] 841 #>  #> [[30]] #> [1] 900 #>  #> [[31]] #> [1] 961 #>  #> [[32]] #> [1] 1024 #>  #> [[33]] #> [1] 1089 #>  #> [[34]] #> [1] 1156 #>  #> [[35]] #> [1] 1225 #>  #> [[36]] #> [1] 1296 #>  #> [[37]] #> [1] 1369 #>  #> [[38]] #> [1] 1444 #>  #> [[39]] #> [1] 1521 #>  #> [[40]] #> [1] 1600 #>  #> [[41]] #> [1] 1681 #>  #> [[42]] #> [1] 1764 #>  #> [[43]] #> [1] 1849 #>  #> [[44]] #> [1] 1936 #>  #> [[45]] #> [1] 2025 #>  #> [[46]] #> [1] 2116 #>  #> [[47]] #> [1] 2209 #>  #> [[48]] #> [1] 2304 #>  #> [[49]] #> [1] 2401 #>  #> [[50]] #> [1] 2500 #>  #> [[51]] #> [1] 2601 #>  #> [[52]] #> [1] 2704 #>  #> [[53]] #> [1] 2809 #>  #> [[54]] #> [1] 2916 #>  #> [[55]] #> [1] 3025 #>  #> [[56]] #> [1] 3136 #>  #> [[57]] #> [1] 3249 #>  #> [[58]] #> [1] 3364 #>  #> [[59]] #> [1] 3481 #>  #> [[60]] #> [1] 3600 #>  #> [[61]] #> [1] 3721 #>  #> [[62]] #> [1] 3844 #>  #> [[63]] #> [1] 3969 #>  #> [[64]] #> [1] 4096 #>  #> [[65]] #> [1] 4225 #>  #> [[66]] #> [1] 4356 #>  #> [[67]] #> [1] 4489 #>  #> [[68]] #> [1] 4624 #>  #> [[69]] #> [1] 4761 #>  #> [[70]] #> [1] 4900 #>  #> [[71]] #> [1] 5041 #>  #> [[72]] #> [1] 5184 #>  #> [[73]] #> [1] 5329 #>  #> [[74]] #> [1] 5476 #>  #> [[75]] #> [1] 5625 #>  #> [[76]] #> [1] 5776 #>  #> [[77]] #> [1] 5929 #>  #> [[78]] #> [1] 6084 #>  #> [[79]] #> [1] 6241 #>  #> [[80]] #> [1] 6400 #>  #> [[81]] #> [1] 6561 #>  #> [[82]] #> [1] 6724 #>  #> [[83]] #> [1] 6889 #>  #> [[84]] #> [1] 7056 #>  #> [[85]] #> [1] 7225 #>  #> [[86]] #> [1] 7396 #>  #> [[87]] #> [1] 7569 #>  #> [[88]] #> [1] 7744 #>  #> [[89]] #> [1] 7921 #>  #> [[90]] #> [1] 8100 #>  #> [[91]] #> [1] 8281 #>  #> [[92]] #> [1] 8464 #>  #> [[93]] #> [1] 8649 #>  #> [[94]] #> [1] 8836 #>  #> [[95]] #> [1] 9025 #>  #> [[96]] #> [1] 9216 #>  #> [[97]] #> [1] 9409 #>  #> [[98]] #> [1] 9604 #>  #> [[99]] #> [1] 9801 #>  #> [[100]] #> [1] 10000 #>   # Sequential with progress fapply(x, slow_fn, pb = TRUE) #>   |                                                  |   0% elapsed=00h 00m 00s, remaining~...  |                                                  |   1% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=                                                 |   2% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=                                                 |   3% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==                                                |   4% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==                                                |   5% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===                                               |   6% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===                                               |   7% elapsed=00h 00m 00s, remaining~00h 00m 01s  |====                                              |   8% elapsed=00h 00m 00s, remaining~00h 00m 01s  |====                                              |   9% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=====                                             |  10% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=====                                             |  11% elapsed=00h 00m 00s, remaining~00h 00m 01s  |======                                            |  12% elapsed=00h 00m 00s, remaining~00h 00m 01s  |======                                            |  13% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=======                                           |  14% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=======                                           |  15% elapsed=00h 00m 00s, remaining~00h 00m 01s  |========                                          |  16% elapsed=00h 00m 00s, remaining~00h 00m 01s  |========                                          |  17% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=========                                         |  18% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=========                                         |  19% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==========                                        |  20% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==========                                        |  21% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===========                                       |  22% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===========                                       |  23% elapsed=00h 00m 00s, remaining~00h 00m 01s  |============                                      |  24% elapsed=00h 00m 00s, remaining~00h 00m 01s  |============                                      |  25% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=============                                     |  26% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=============                                     |  27% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==============                                    |  28% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==============                                    |  29% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===============                                   |  30% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===============                                   |  31% elapsed=00h 00m 00s, remaining~00h 00m 01s  |================                                  |  32% elapsed=00h 00m 00s, remaining~00h 00m 01s  |================                                  |  33% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=================                                 |  34% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=================                                 |  35% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==================                                |  36% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==================                                |  37% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===================                               |  38% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===================                               |  39% elapsed=00h 00m 00s, remaining~00h 00m 01s  |====================                              |  40% elapsed=00h 00m 00s, remaining~00h 00m 01s  |====================                              |  41% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=====================                             |  42% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=====================                             |  43% elapsed=00h 00m 00s, remaining~00h 00m 01s  |======================                            |  44% elapsed=00h 00m 00s, remaining~00h 00m 01s  |======================                            |  45% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=======================                           |  46% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=======================                           |  47% elapsed=00h 00m 00s, remaining~00h 00m 01s  |========================                          |  48% elapsed=00h 00m 01s, remaining~00h 00m 01s  |========================                          |  49% elapsed=00h 00m 01s, remaining~00h 00m 01s  |=========================                         |  50% elapsed=00h 00m 01s, remaining~00h 00m 01s  |=========================                         |  51% elapsed=00h 00m 01s, remaining~00h 00m 01s  |==========================                        |  52% elapsed=00h 00m 01s, remaining~00h 00m 01s  |==========================                        |  53% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===========================                       |  54% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===========================                       |  55% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================                      |  56% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================                      |  57% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================                      |  58% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=============================                     |  59% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==============================                    |  60% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==============================                    |  61% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===============================                   |  62% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===============================                   |  63% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================                  |  64% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================                  |  65% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=================================                 |  66% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=================================                 |  67% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==================================                |  68% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==================================                |  69% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===================================               |  70% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===================================               |  71% elapsed=00h 00m 01s, remaining~00h 00m 00s  |====================================              |  72% elapsed=00h 00m 01s, remaining~00h 00m 00s  |====================================              |  73% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=====================================             |  74% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=====================================             |  75% elapsed=00h 00m 01s, remaining~00h 00m 00s  |======================================            |  76% elapsed=00h 00m 01s, remaining~00h 00m 00s  |======================================            |  77% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=======================================           |  78% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=======================================           |  79% elapsed=00h 00m 01s, remaining~00h 00m 00s  |========================================          |  80% elapsed=00h 00m 01s, remaining~00h 00m 00s  |========================================          |  81% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=========================================         |  82% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=========================================         |  83% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==========================================        |  84% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==========================================        |  85% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===========================================       |  86% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===========================================       |  87% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================================      |  88% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================================      |  89% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=============================================     |  90% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=============================================     |  91% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==============================================    |  92% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==============================================    |  93% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===============================================   |  94% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===============================================   |  95% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================================  |  96% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================================  |  97% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================================= |  98% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================================= |  99% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==================================================| 100% elapsed=00h 00m 01s, remaining~00h 00m 00s #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 9 #>  #> [[4]] #> [1] 16 #>  #> [[5]] #> [1] 25 #>  #> [[6]] #> [1] 36 #>  #> [[7]] #> [1] 49 #>  #> [[8]] #> [1] 64 #>  #> [[9]] #> [1] 81 #>  #> [[10]] #> [1] 100 #>  #> [[11]] #> [1] 121 #>  #> [[12]] #> [1] 144 #>  #> [[13]] #> [1] 169 #>  #> [[14]] #> [1] 196 #>  #> [[15]] #> [1] 225 #>  #> [[16]] #> [1] 256 #>  #> [[17]] #> [1] 289 #>  #> [[18]] #> [1] 324 #>  #> [[19]] #> [1] 361 #>  #> [[20]] #> [1] 400 #>  #> [[21]] #> [1] 441 #>  #> [[22]] #> [1] 484 #>  #> [[23]] #> [1] 529 #>  #> [[24]] #> [1] 576 #>  #> [[25]] #> [1] 625 #>  #> [[26]] #> [1] 676 #>  #> [[27]] #> [1] 729 #>  #> [[28]] #> [1] 784 #>  #> [[29]] #> [1] 841 #>  #> [[30]] #> [1] 900 #>  #> [[31]] #> [1] 961 #>  #> [[32]] #> [1] 1024 #>  #> [[33]] #> [1] 1089 #>  #> [[34]] #> [1] 1156 #>  #> [[35]] #> [1] 1225 #>  #> [[36]] #> [1] 1296 #>  #> [[37]] #> [1] 1369 #>  #> [[38]] #> [1] 1444 #>  #> [[39]] #> [1] 1521 #>  #> [[40]] #> [1] 1600 #>  #> [[41]] #> [1] 1681 #>  #> [[42]] #> [1] 1764 #>  #> [[43]] #> [1] 1849 #>  #> [[44]] #> [1] 1936 #>  #> [[45]] #> [1] 2025 #>  #> [[46]] #> [1] 2116 #>  #> [[47]] #> [1] 2209 #>  #> [[48]] #> [1] 2304 #>  #> [[49]] #> [1] 2401 #>  #> [[50]] #> [1] 2500 #>  #> [[51]] #> [1] 2601 #>  #> [[52]] #> [1] 2704 #>  #> [[53]] #> [1] 2809 #>  #> [[54]] #> [1] 2916 #>  #> [[55]] #> [1] 3025 #>  #> [[56]] #> [1] 3136 #>  #> [[57]] #> [1] 3249 #>  #> [[58]] #> [1] 3364 #>  #> [[59]] #> [1] 3481 #>  #> [[60]] #> [1] 3600 #>  #> [[61]] #> [1] 3721 #>  #> [[62]] #> [1] 3844 #>  #> [[63]] #> [1] 3969 #>  #> [[64]] #> [1] 4096 #>  #> [[65]] #> [1] 4225 #>  #> [[66]] #> [1] 4356 #>  #> [[67]] #> [1] 4489 #>  #> [[68]] #> [1] 4624 #>  #> [[69]] #> [1] 4761 #>  #> [[70]] #> [1] 4900 #>  #> [[71]] #> [1] 5041 #>  #> [[72]] #> [1] 5184 #>  #> [[73]] #> [1] 5329 #>  #> [[74]] #> [1] 5476 #>  #> [[75]] #> [1] 5625 #>  #> [[76]] #> [1] 5776 #>  #> [[77]] #> [1] 5929 #>  #> [[78]] #> [1] 6084 #>  #> [[79]] #> [1] 6241 #>  #> [[80]] #> [1] 6400 #>  #> [[81]] #> [1] 6561 #>  #> [[82]] #> [1] 6724 #>  #> [[83]] #> [1] 6889 #>  #> [[84]] #> [1] 7056 #>  #> [[85]] #> [1] 7225 #>  #> [[86]] #> [1] 7396 #>  #> [[87]] #> [1] 7569 #>  #> [[88]] #> [1] 7744 #>  #> [[89]] #> [1] 7921 #>  #> [[90]] #> [1] 8100 #>  #> [[91]] #> [1] 8281 #>  #> [[92]] #> [1] 8464 #>  #> [[93]] #> [1] 8649 #>  #> [[94]] #> [1] 8836 #>  #> [[95]] #> [1] 9025 #>  #> [[96]] #> [1] 9216 #>  #> [[97]] #> [1] 9409 #>  #> [[98]] #> [1] 9604 #>  #> [[99]] #> [1] 9801 #>  #> [[100]] #> [1] 10000 #>   # Parallel execution (Linux/macOS) if (FALSE) { # \\dontrun{ fapply(x, slow_fn, ncores = 4) fapply(x, slow_fn, ncores = 4, pb = TRUE) } # }"},{"path":"/reference/fcompose.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose multiple functions — fcompose","title":"Compose multiple functions — fcompose","text":"Create new function composing several functions, applied right left. Equivalent `f1(f2(f3(...)))`.","code":""},{"path":"/reference/fcompose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose multiple functions — fcompose","text":"","code":"fcompose(...)"},{"path":"/reference/fcompose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose multiple functions — fcompose","text":"... Functions compose. must take single argument return object compatible next function chain.","code":""},{"path":"/reference/fcompose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose multiple functions — fcompose","text":"new function equivalent nested application input functions.","code":""},{"path":"/reference/fcompose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose multiple functions — fcompose","text":"","code":"square <- function(x) x^2 add1 <- function(x) x + 1  f <- fcompose(sqrt, square, add1)  # => sqrt(square(x + 1)) f(4)  # => sqrt((4 + 1)^2) = sqrt(25) = 5 #> [1] 5  # More compact fcompose(log, exp)(2)  # log(exp(2)) = 2 #> [1] 2"},{"path":"/reference/fcv.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional Cross-Validation mapping — fcv","title":"Functional Cross-Validation mapping — fcv","text":"Applies user-defined function `.f` element `.splits`, typically cross-validation objects `rsample::vfold_cv()`.","code":""},{"path":"/reference/fcv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional Cross-Validation mapping — fcv","text":"","code":"fcv(.splits, .f, ncores = NULL, pb = FALSE, ...)"},{"path":"/reference/fcv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional Cross-Validation mapping — fcv","text":".splits list resample splits (e.g., `rsample::vfold_cv()`). .f function apply split. Typically expects single `split` object. ncores Integer. Number cores use parallel processing. Default `NULL` (sequential). pb Logical. Whether display progress bar. Default `FALSE`. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/fcv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional Cross-Validation mapping — fcv","text":"list results returned applying `.f` element `.splits`.","code":""},{"path":"/reference/fcv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional Cross-Validation mapping — fcv","text":"","code":"library(rsample) set.seed(123) cv_splits <- vfold_cv(mtcars, v = 5)  # Apply summary over training sets fcv(cv_splits$splits, function(split) {   summary(analysis(split)) }) #> [[1]] #>       mpg             cyl           disp             hp             drat       #>  Min.   :10.40   Min.   :4.0   Min.   : 71.1   Min.   : 52.0   Min.   :2.760   #>  1st Qu.:15.20   1st Qu.:4.0   1st Qu.:145.0   1st Qu.:105.0   1st Qu.:3.070   #>  Median :18.70   Median :6.0   Median :258.0   Median :150.0   Median :3.230   #>  Mean   :19.99   Mean   :6.4   Mean   :242.4   Mean   :148.3   Mean   :3.497   #>  3rd Qu.:22.80   3rd Qu.:8.0   3rd Qu.:318.0   3rd Qu.:180.0   3rd Qu.:3.900   #>  Max.   :33.90   Max.   :8.0   Max.   :472.0   Max.   :335.0   Max.   :4.930   #>        wt             qsec             vs            am            gear      #>  Min.   :1.513   Min.   :14.60   Min.   :0.0   Min.   :0.00   Min.   :3.00   #>  1st Qu.:2.770   1st Qu.:17.02   1st Qu.:0.0   1st Qu.:0.00   1st Qu.:3.00   #>  Median :3.440   Median :17.60   Median :0.0   Median :0.00   Median :3.00   #>  Mean   :3.320   Mean   :17.78   Mean   :0.4   Mean   :0.36   Mean   :3.64   #>  3rd Qu.:3.730   3rd Qu.:18.61   3rd Qu.:1.0   3rd Qu.:1.00   3rd Qu.:4.00   #>  Max.   :5.424   Max.   :20.22   Max.   :1.0   Max.   :1.00   Max.   :5.00   #>       carb      #>  Min.   :1.00   #>  1st Qu.:2.00   #>  Median :2.00   #>  Mean   :2.88   #>  3rd Qu.:4.00   #>  Max.   :8.00   #>  #> [[2]] #>       mpg             cyl           disp             hp             drat      #>  Min.   :10.40   Min.   :4.0   Min.   : 79.0   Min.   : 66.0   Min.   :2.76   #>  1st Qu.:15.20   1st Qu.:4.0   1st Qu.:140.8   1st Qu.:109.0   1st Qu.:3.08   #>  Median :18.70   Median :6.0   Median :258.0   Median :123.0   Median :3.70   #>  Mean   :18.86   Mean   :6.4   Mean   :249.9   Mean   :151.6   Mean   :3.53   #>  3rd Qu.:21.40   3rd Qu.:8.0   3rd Qu.:351.0   3rd Qu.:180.0   3rd Qu.:3.92   #>  Max.   :30.40   Max.   :8.0   Max.   :472.0   Max.   :264.0   Max.   :4.43   #>        wt             qsec             vs            am            gear      #>  Min.   :1.513   Min.   :14.50   Min.   :0.0   Min.   :0.00   Min.   :3.00   #>  1st Qu.:2.780   1st Qu.:17.02   1st Qu.:0.0   1st Qu.:0.00   1st Qu.:3.00   #>  Median :3.440   Median :17.60   Median :0.0   Median :0.00   Median :3.00   #>  Mean   :3.370   Mean   :17.85   Mean   :0.4   Mean   :0.32   Mean   :3.56   #>  3rd Qu.:3.780   3rd Qu.:18.61   3rd Qu.:1.0   3rd Qu.:1.00   3rd Qu.:4.00   #>  Max.   :5.424   Max.   :22.90   Max.   :1.0   Max.   :1.00   Max.   :5.00   #>       carb      #>  Min.   :1.00   #>  1st Qu.:2.00   #>  Median :3.00   #>  Mean   :2.72   #>  3rd Qu.:4.00   #>  Max.   :4.00   #>  #> [[3]] #>       mpg             cyl             disp             hp        #>  Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0   #>  1st Qu.:15.95   1st Qu.:4.000   1st Qu.:120.5   1st Qu.: 93.5   #>  Median :20.35   Median :6.000   Median :163.8   Median :110.0   #>  Mean   :20.66   Mean   :5.923   Mean   :207.4   Mean   :136.0   #>  3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:294.7   3rd Qu.:175.0   #>  Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0   #>       drat             wt             qsec             vs            am         #>  Min.   :2.760   Min.   :1.615   Min.   :14.50   Min.   :0.0   Min.   :0.0000   #>  1st Qu.:3.098   1st Qu.:2.504   1st Qu.:16.91   1st Qu.:0.0   1st Qu.:0.0000   #>  Median :3.790   Median :3.180   Median :18.15   Median :0.5   Median :0.0000   #>  Mean   :3.679   Mean   :3.074   Mean   :18.02   Mean   :0.5   Mean   :0.4615   #>  3rd Qu.:4.040   3rd Qu.:3.505   3rd Qu.:19.30   3rd Qu.:1.0   3rd Qu.:1.0000   #>  Max.   :4.930   Max.   :5.250   Max.   :22.90   Max.   :1.0   Max.   :1.0000   #>       gear            carb       #>  Min.   :3.000   Min.   :1.000   #>  1st Qu.:3.000   1st Qu.:1.250   #>  Median :4.000   Median :2.000   #>  Mean   :3.769   Mean   :2.731   #>  3rd Qu.:4.000   3rd Qu.:4.000   #>  Max.   :5.000   Max.   :8.000   #>  #> [[4]] #>       mpg             cyl         disp             hp             drat       #>  Min.   :10.40   Min.   :4   Min.   : 71.1   Min.   : 52.0   Min.   :2.760   #>  1st Qu.:15.57   1st Qu.:4   1st Qu.:120.5   1st Qu.: 95.5   1st Qu.:3.215   #>  Median :19.45   Median :6   Median :163.8   Median :118.0   Median :3.750   #>  Mean   :20.67   Mean   :6   Mean   :214.1   Mean   :145.4   Mean   :3.690   #>  3rd Qu.:24.00   3rd Qu.:8   3rd Qu.:313.8   3rd Qu.:180.0   3rd Qu.:4.040   #>  Max.   :33.90   Max.   :8   Max.   :460.0   Max.   :335.0   Max.   :4.930   #>        wt             qsec             vs               am         #>  Min.   :1.513   Min.   :14.50   Min.   :0.0000   Min.   :0.0000   #>  1st Qu.:2.504   1st Qu.:16.74   1st Qu.:0.0000   1st Qu.:0.0000   #>  Median :3.180   Median :17.71   Median :0.0000   Median :0.0000   #>  Mean   :3.108   Mean   :17.82   Mean   :0.4615   Mean   :0.4615   #>  3rd Qu.:3.558   3rd Qu.:18.90   3rd Qu.:1.0000   3rd Qu.:1.0000   #>  Max.   :5.424   Max.   :22.90   Max.   :1.0000   Max.   :1.0000   #>       gear            carb       #>  Min.   :3.000   Min.   :1.000   #>  1st Qu.:3.000   1st Qu.:2.000   #>  Median :4.000   Median :2.500   #>  Mean   :3.808   Mean   :2.962   #>  3rd Qu.:4.000   3rd Qu.:4.000   #>  Max.   :5.000   Max.   :8.000   #>  #> [[5]] #>       mpg             cyl             disp             hp        #>  Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0   #>  1st Qu.:15.28   1st Qu.:4.000   1st Qu.:120.3   1st Qu.: 95.5   #>  Median :19.45   Median :7.000   Median :266.9   Median :150.0   #>  Mean   :20.22   Mean   :6.231   Mean   :241.0   Mean   :152.4   #>  3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:350.8   3rd Qu.:198.8   #>  Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0   #>       drat             wt             qsec             vs         #>  Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000   #>  1st Qu.:3.098   1st Qu.:2.504   1st Qu.:16.88   1st Qu.:0.0000   #>  Median :3.655   Median :3.203   Median :17.51   Median :0.0000   #>  Mean   :3.580   Mean   :3.224   Mean   :17.77   Mean   :0.4231   #>  3rd Qu.:3.915   3rd Qu.:3.690   3rd Qu.:18.83   3rd Qu.:1.0000   #>  Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000   #>        am              gear            carb       #>  Min.   :0.0000   Min.   :3.000   Min.   :1.000   #>  1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000   #>  Median :0.0000   Median :3.500   Median :2.000   #>  Mean   :0.4231   Mean   :3.654   Mean   :2.769   #>  3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000   #>  Max.   :1.0000   Max.   :5.000   Max.   :8.000   #>   # With progress and parallel execution if (FALSE) { # \\dontrun{ fcv(cv_splits$splits, function(split) {   summary(analysis(split)) }, ncores = 2, pb = TRUE) } # }"},{"path":"/reference/floop.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional loop with optional parallelism and progress bar — floop","title":"Functional loop with optional parallelism and progress bar — floop","text":"`floop()` applies function `.f` element `.x`, optionally parallel, optional progress bar. Unlike `fwalk()`, can return results used purely side effects (like -loop).","code":""},{"path":"/reference/floop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional loop with optional parallelism and progress bar — floop","text":"","code":"floop(.x, .f, ncores = 1, pb = FALSE, .capture = TRUE, ...)"},{"path":"/reference/floop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional loop with optional parallelism and progress bar — floop","text":".x vector list elements iterate . .f function apply element `.x`. ncores Integer. Number cores use. Default 1 (sequential). pb Logical. Show progress bar? Default `FALSE`. .capture Logical. results `.f` captured returned? `FALSE`, acts like side-effect loop. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/floop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional loop with optional parallelism and progress bar — floop","text":"list results `.capture = TRUE`, otherwise returns `.x` invisibly.","code":""},{"path":"/reference/floop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional loop with optional parallelism and progress bar — floop","text":"","code":"# Functional loop that collects output floop(1:3, function(i) i^2) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 9 #>   # Side-effect only loop (like for-loop with cat) if (FALSE) { # \\dontrun{ floop(1:5, function(i) cat(\" Processing\", i, \"\\n\"), pb = TRUE, .capture = FALSE) } # }"},{"path":"/reference/fmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional mapping with optional parallelism and progress bars — fmap","title":"Functional mapping with optional parallelism and progress bars — fmap","text":"Applies function `.f` element `.x`, optional parallel processing progress bar support.","code":""},{"path":"/reference/fmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional mapping with optional parallelism and progress bars — fmap","text":"","code":"fmap(.x, .f, ncores = NULL, pb = FALSE, ...)"},{"path":"/reference/fmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional mapping with optional parallelism and progress bars — fmap","text":".x list atomic vector elements iterate . .f function apply element `.x`. Can function string naming function. ncores Integer. Number CPU cores use parallel processing. Default `NULL` (sequential). pb Logical. Whether show progress bar. Default `FALSE`. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/fmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional mapping with optional parallelism and progress bars — fmap","text":"list results, one element `.x`.","code":""},{"path":"/reference/fmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional mapping with optional parallelism and progress bars — fmap","text":"","code":"slow_fn <- function(x) { Sys.sleep(0.01); x^2 } x <- 1:100  # Basic usage fmap(x, slow_fn) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 9 #>  #> [[4]] #> [1] 16 #>  #> [[5]] #> [1] 25 #>  #> [[6]] #> [1] 36 #>  #> [[7]] #> [1] 49 #>  #> [[8]] #> [1] 64 #>  #> [[9]] #> [1] 81 #>  #> [[10]] #> [1] 100 #>  #> [[11]] #> [1] 121 #>  #> [[12]] #> [1] 144 #>  #> [[13]] #> [1] 169 #>  #> [[14]] #> [1] 196 #>  #> [[15]] #> [1] 225 #>  #> [[16]] #> [1] 256 #>  #> [[17]] #> [1] 289 #>  #> [[18]] #> [1] 324 #>  #> [[19]] #> [1] 361 #>  #> [[20]] #> [1] 400 #>  #> [[21]] #> [1] 441 #>  #> [[22]] #> [1] 484 #>  #> [[23]] #> [1] 529 #>  #> [[24]] #> [1] 576 #>  #> [[25]] #> [1] 625 #>  #> [[26]] #> [1] 676 #>  #> [[27]] #> [1] 729 #>  #> [[28]] #> [1] 784 #>  #> [[29]] #> [1] 841 #>  #> [[30]] #> [1] 900 #>  #> [[31]] #> [1] 961 #>  #> [[32]] #> [1] 1024 #>  #> [[33]] #> [1] 1089 #>  #> [[34]] #> [1] 1156 #>  #> [[35]] #> [1] 1225 #>  #> [[36]] #> [1] 1296 #>  #> [[37]] #> [1] 1369 #>  #> [[38]] #> [1] 1444 #>  #> [[39]] #> [1] 1521 #>  #> [[40]] #> [1] 1600 #>  #> [[41]] #> [1] 1681 #>  #> [[42]] #> [1] 1764 #>  #> [[43]] #> [1] 1849 #>  #> [[44]] #> [1] 1936 #>  #> [[45]] #> [1] 2025 #>  #> [[46]] #> [1] 2116 #>  #> [[47]] #> [1] 2209 #>  #> [[48]] #> [1] 2304 #>  #> [[49]] #> [1] 2401 #>  #> [[50]] #> [1] 2500 #>  #> [[51]] #> [1] 2601 #>  #> [[52]] #> [1] 2704 #>  #> [[53]] #> [1] 2809 #>  #> [[54]] #> [1] 2916 #>  #> [[55]] #> [1] 3025 #>  #> [[56]] #> [1] 3136 #>  #> [[57]] #> [1] 3249 #>  #> [[58]] #> [1] 3364 #>  #> [[59]] #> [1] 3481 #>  #> [[60]] #> [1] 3600 #>  #> [[61]] #> [1] 3721 #>  #> [[62]] #> [1] 3844 #>  #> [[63]] #> [1] 3969 #>  #> [[64]] #> [1] 4096 #>  #> [[65]] #> [1] 4225 #>  #> [[66]] #> [1] 4356 #>  #> [[67]] #> [1] 4489 #>  #> [[68]] #> [1] 4624 #>  #> [[69]] #> [1] 4761 #>  #> [[70]] #> [1] 4900 #>  #> [[71]] #> [1] 5041 #>  #> [[72]] #> [1] 5184 #>  #> [[73]] #> [1] 5329 #>  #> [[74]] #> [1] 5476 #>  #> [[75]] #> [1] 5625 #>  #> [[76]] #> [1] 5776 #>  #> [[77]] #> [1] 5929 #>  #> [[78]] #> [1] 6084 #>  #> [[79]] #> [1] 6241 #>  #> [[80]] #> [1] 6400 #>  #> [[81]] #> [1] 6561 #>  #> [[82]] #> [1] 6724 #>  #> [[83]] #> [1] 6889 #>  #> [[84]] #> [1] 7056 #>  #> [[85]] #> [1] 7225 #>  #> [[86]] #> [1] 7396 #>  #> [[87]] #> [1] 7569 #>  #> [[88]] #> [1] 7744 #>  #> [[89]] #> [1] 7921 #>  #> [[90]] #> [1] 8100 #>  #> [[91]] #> [1] 8281 #>  #> [[92]] #> [1] 8464 #>  #> [[93]] #> [1] 8649 #>  #> [[94]] #> [1] 8836 #>  #> [[95]] #> [1] 9025 #>  #> [[96]] #> [1] 9216 #>  #> [[97]] #> [1] 9409 #>  #> [[98]] #> [1] 9604 #>  #> [[99]] #> [1] 9801 #>  #> [[100]] #> [1] 10000 #>   # With progress bar fmap(x, slow_fn, pb = TRUE) #>   |                                                  |   0% elapsed=00h 00m 00s, remaining~...  |                                                  |   1% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=                                                 |   2% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=                                                 |   3% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==                                                |   4% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==                                                |   5% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===                                               |   6% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===                                               |   7% elapsed=00h 00m 00s, remaining~00h 00m 01s  |====                                              |   8% elapsed=00h 00m 00s, remaining~00h 00m 01s  |====                                              |   9% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=====                                             |  10% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=====                                             |  11% elapsed=00h 00m 00s, remaining~00h 00m 01s  |======                                            |  12% elapsed=00h 00m 00s, remaining~00h 00m 01s  |======                                            |  13% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=======                                           |  14% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=======                                           |  15% elapsed=00h 00m 00s, remaining~00h 00m 01s  |========                                          |  16% elapsed=00h 00m 00s, remaining~00h 00m 01s  |========                                          |  17% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=========                                         |  18% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=========                                         |  19% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==========                                        |  20% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==========                                        |  21% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===========                                       |  22% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===========                                       |  23% elapsed=00h 00m 00s, remaining~00h 00m 01s  |============                                      |  24% elapsed=00h 00m 00s, remaining~00h 00m 01s  |============                                      |  25% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=============                                     |  26% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=============                                     |  27% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==============                                    |  28% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==============                                    |  29% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===============                                   |  30% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===============                                   |  31% elapsed=00h 00m 00s, remaining~00h 00m 01s  |================                                  |  32% elapsed=00h 00m 00s, remaining~00h 00m 01s  |================                                  |  33% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=================                                 |  34% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=================                                 |  35% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==================                                |  36% elapsed=00h 00m 00s, remaining~00h 00m 01s  |==================                                |  37% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===================                               |  38% elapsed=00h 00m 00s, remaining~00h 00m 01s  |===================                               |  39% elapsed=00h 00m 00s, remaining~00h 00m 01s  |====================                              |  40% elapsed=00h 00m 00s, remaining~00h 00m 01s  |====================                              |  41% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=====================                             |  42% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=====================                             |  43% elapsed=00h 00m 00s, remaining~00h 00m 01s  |======================                            |  44% elapsed=00h 00m 00s, remaining~00h 00m 01s  |======================                            |  45% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=======================                           |  46% elapsed=00h 00m 00s, remaining~00h 00m 01s  |=======================                           |  47% elapsed=00h 00m 00s, remaining~00h 00m 01s  |========================                          |  48% elapsed=00h 00m 01s, remaining~00h 00m 01s  |========================                          |  49% elapsed=00h 00m 01s, remaining~00h 00m 01s  |=========================                         |  50% elapsed=00h 00m 01s, remaining~00h 00m 01s  |=========================                         |  51% elapsed=00h 00m 01s, remaining~00h 00m 01s  |==========================                        |  52% elapsed=00h 00m 01s, remaining~00h 00m 01s  |==========================                        |  53% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===========================                       |  54% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===========================                       |  55% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================                      |  56% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================                      |  57% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================                      |  58% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=============================                     |  59% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==============================                    |  60% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==============================                    |  61% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===============================                   |  62% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===============================                   |  63% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================                  |  64% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================                  |  65% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=================================                 |  66% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=================================                 |  67% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==================================                |  68% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==================================                |  69% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===================================               |  70% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===================================               |  71% elapsed=00h 00m 01s, remaining~00h 00m 00s  |====================================              |  72% elapsed=00h 00m 01s, remaining~00h 00m 00s  |====================================              |  73% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=====================================             |  74% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=====================================             |  75% elapsed=00h 00m 01s, remaining~00h 00m 00s  |======================================            |  76% elapsed=00h 00m 01s, remaining~00h 00m 00s  |======================================            |  77% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=======================================           |  78% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=======================================           |  79% elapsed=00h 00m 01s, remaining~00h 00m 00s  |========================================          |  80% elapsed=00h 00m 01s, remaining~00h 00m 00s  |========================================          |  81% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=========================================         |  82% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=========================================         |  83% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==========================================        |  84% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==========================================        |  85% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===========================================       |  86% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===========================================       |  87% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================================      |  88% elapsed=00h 00m 01s, remaining~00h 00m 00s  |============================================      |  89% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=============================================     |  90% elapsed=00h 00m 01s, remaining~00h 00m 00s  |=============================================     |  91% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==============================================    |  92% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==============================================    |  93% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===============================================   |  94% elapsed=00h 00m 01s, remaining~00h 00m 00s  |===============================================   |  95% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================================  |  96% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================================  |  97% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================================= |  98% elapsed=00h 00m 01s, remaining~00h 00m 00s  |================================================= |  99% elapsed=00h 00m 01s, remaining~00h 00m 00s  |==================================================| 100% elapsed=00h 00m 01s, remaining~00h 00m 00s #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 9 #>  #> [[4]] #> [1] 16 #>  #> [[5]] #> [1] 25 #>  #> [[6]] #> [1] 36 #>  #> [[7]] #> [1] 49 #>  #> [[8]] #> [1] 64 #>  #> [[9]] #> [1] 81 #>  #> [[10]] #> [1] 100 #>  #> [[11]] #> [1] 121 #>  #> [[12]] #> [1] 144 #>  #> [[13]] #> [1] 169 #>  #> [[14]] #> [1] 196 #>  #> [[15]] #> [1] 225 #>  #> [[16]] #> [1] 256 #>  #> [[17]] #> [1] 289 #>  #> [[18]] #> [1] 324 #>  #> [[19]] #> [1] 361 #>  #> [[20]] #> [1] 400 #>  #> [[21]] #> [1] 441 #>  #> [[22]] #> [1] 484 #>  #> [[23]] #> [1] 529 #>  #> [[24]] #> [1] 576 #>  #> [[25]] #> [1] 625 #>  #> [[26]] #> [1] 676 #>  #> [[27]] #> [1] 729 #>  #> [[28]] #> [1] 784 #>  #> [[29]] #> [1] 841 #>  #> [[30]] #> [1] 900 #>  #> [[31]] #> [1] 961 #>  #> [[32]] #> [1] 1024 #>  #> [[33]] #> [1] 1089 #>  #> [[34]] #> [1] 1156 #>  #> [[35]] #> [1] 1225 #>  #> [[36]] #> [1] 1296 #>  #> [[37]] #> [1] 1369 #>  #> [[38]] #> [1] 1444 #>  #> [[39]] #> [1] 1521 #>  #> [[40]] #> [1] 1600 #>  #> [[41]] #> [1] 1681 #>  #> [[42]] #> [1] 1764 #>  #> [[43]] #> [1] 1849 #>  #> [[44]] #> [1] 1936 #>  #> [[45]] #> [1] 2025 #>  #> [[46]] #> [1] 2116 #>  #> [[47]] #> [1] 2209 #>  #> [[48]] #> [1] 2304 #>  #> [[49]] #> [1] 2401 #>  #> [[50]] #> [1] 2500 #>  #> [[51]] #> [1] 2601 #>  #> [[52]] #> [1] 2704 #>  #> [[53]] #> [1] 2809 #>  #> [[54]] #> [1] 2916 #>  #> [[55]] #> [1] 3025 #>  #> [[56]] #> [1] 3136 #>  #> [[57]] #> [1] 3249 #>  #> [[58]] #> [1] 3364 #>  #> [[59]] #> [1] 3481 #>  #> [[60]] #> [1] 3600 #>  #> [[61]] #> [1] 3721 #>  #> [[62]] #> [1] 3844 #>  #> [[63]] #> [1] 3969 #>  #> [[64]] #> [1] 4096 #>  #> [[65]] #> [1] 4225 #>  #> [[66]] #> [1] 4356 #>  #> [[67]] #> [1] 4489 #>  #> [[68]] #> [1] 4624 #>  #> [[69]] #> [1] 4761 #>  #> [[70]] #> [1] 4900 #>  #> [[71]] #> [1] 5041 #>  #> [[72]] #> [1] 5184 #>  #> [[73]] #> [1] 5329 #>  #> [[74]] #> [1] 5476 #>  #> [[75]] #> [1] 5625 #>  #> [[76]] #> [1] 5776 #>  #> [[77]] #> [1] 5929 #>  #> [[78]] #> [1] 6084 #>  #> [[79]] #> [1] 6241 #>  #> [[80]] #> [1] 6400 #>  #> [[81]] #> [1] 6561 #>  #> [[82]] #> [1] 6724 #>  #> [[83]] #> [1] 6889 #>  #> [[84]] #> [1] 7056 #>  #> [[85]] #> [1] 7225 #>  #> [[86]] #> [1] 7396 #>  #> [[87]] #> [1] 7569 #>  #> [[88]] #> [1] 7744 #>  #> [[89]] #> [1] 7921 #>  #> [[90]] #> [1] 8100 #>  #> [[91]] #> [1] 8281 #>  #> [[92]] #> [1] 8464 #>  #> [[93]] #> [1] 8649 #>  #> [[94]] #> [1] 8836 #>  #> [[95]] #> [1] 9025 #>  #> [[96]] #> [1] 9216 #>  #> [[97]] #> [1] 9409 #>  #> [[98]] #> [1] 9604 #>  #> [[99]] #> [1] 9801 #>  #> [[100]] #> [1] 10000 #>   # With parallel execution (non-Windows) if (FALSE) { # \\dontrun{ fmap(x, slow_fn, ncores = 4, pb = TRUE) } # }  # Benchmark against furrr if (FALSE) { # \\dontrun{ library(furrr) library(bench) library(future)  plan(multisession, workers = 8) bench::mark(   funr_fmap    = fmap(x, slow_fn, ncores = 8, pb = FALSE),   furrr_future = furrr::future_map(x, slow_fn),   iterations = 10 ) } # }"},{"path":"/reference/fmapc.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function column-wise with name access and parallelism — fmapc","title":"Apply a function column-wise with name access and parallelism — fmapc","text":"Applies function `.f` column data frame `.df`. call receives column vector name, enabling name-aware column processing. Supports parallel execution progress display.","code":""},{"path":"/reference/fmapc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function column-wise with name access and parallelism — fmapc","text":"","code":"fmapc(.df, .f, ncores = NULL, pb = FALSE, ...)"},{"path":"/reference/fmapc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function column-wise with name access and parallelism — fmapc","text":".df data frame whose columns iterated . .f function takes two arguments: column vector name. ncores Integer. Number cores use parallel processing. Default `NULL` (sequential). pb Logical. Whether display progress bar. Default `FALSE`. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/fmapc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function column-wise with name access and parallelism — fmapc","text":"list results obtained applying `.f` column `.df`.","code":""},{"path":"/reference/fmapc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function column-wise with name access and parallelism — fmapc","text":"","code":"df <- data.frame(a = 1:3, b = 4:6)  # Apply a function that returns column mean and name fmapc(df, function(x, name) list(mean = mean(x), var = var(x), name = name)) #> $a #> $a$mean #> [1] 2 #>  #> $a$var #> [1] 1 #>  #> $a$name #> [1] \"a\" #>  #>  #> $b #> $b$mean #> [1] 5 #>  #> $b$var #> [1] 1 #>  #> $b$name #> [1] \"b\" #>  #>   # With progress and parallel execution if (FALSE) { # \\dontrun{ fmapc(df, function(x, name) mean(x), ncores = 2, pb = TRUE) } # }"},{"path":"/reference/fmapg.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to groups of a data frame in parallel — fmapg","title":"Apply a function to groups of a data frame in parallel — fmapg","text":"Applies function `.f` group rows data frame `.df`, grouping defined one variables ``. group passed data frame `.f`. Supports parallelism optional progress display.","code":""},{"path":"/reference/fmapg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to groups of a data frame in parallel — fmapg","text":"","code":"fmapg(.df, .f, by, ncores = NULL, pb = FALSE, ...)"},{"path":"/reference/fmapg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to groups of a data frame in parallel — fmapg","text":".df data frame group apply function . .f function apply group. function accept data frame (group). character vector column names `.df` used grouping. ncores Integer. Number cores use parallel processing. Default `NULL` (sequential). pb Logical. Whether show progress bar. Default `FALSE`. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/fmapg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to groups of a data frame in parallel — fmapg","text":"list results, one group defined ``.","code":""},{"path":"/reference/fmapg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to groups of a data frame in parallel — fmapg","text":"","code":"# Group-wise mean of Sepal.Length in iris dataset fmapg(iris, function(df) mean(df$Sepal.Length), by = \"Species\") #> $setosa #> [1] 5.006 #>  #> $versicolor #> [1] 5.936 #>  #> $virginica #> [1] 6.588 #>   # Group-wise model fitting with progress and parallelism if (FALSE) { # \\dontrun{ fmapg(mtcars, function(df) lm(mpg ~ wt, data = df), by = \"cyl\", ncores = 2, pb = TRUE) } # }"},{"path":"/reference/fmapn.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over multiple argument lists in parallel — fmapn","title":"Apply a function over multiple argument lists in parallel — fmapn","text":"Applies function `.f` multiple aligned lists `.l`. element `.l` list vector length. call `.f` receives one element list. Supports parallel execution progress display.","code":""},{"path":"/reference/fmapn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over multiple argument lists in parallel — fmapn","text":"","code":"fmapn(.l, .f, ncores = NULL, pb = FALSE, ...)"},{"path":"/reference/fmapn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over multiple argument lists in parallel — fmapn","text":".l list vectors lists. elements must equal length. .f function apply. must accept many arguments elements `.l`. ncores Integer. Number cores use parallel processing. Default `NULL` (sequential). pb Logical. Whether display progress bar. Default `FALSE`. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/fmapn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function over multiple argument lists in parallel — fmapn","text":"list results obtained applying `.f` tuple `.l`.","code":""},{"path":"/reference/fmapn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function over multiple argument lists in parallel — fmapn","text":"","code":"# Fit a linear model for each response variable using the same predictor df <- data.frame(   y1 = rnorm(100),   y2 = rnorm(100),   x = rnorm(100) )  # List of formulas and data formulas <- list(y1 ~ x, y2 ~ x) data_list <- list(df, df)  fmapn(list(formula = formulas, data = data_list), function(formula, data) {   lm(formula, data = data) }) #> [[1]] #>  #> Call: #> lm(formula = formula, data = data) #>  #> Coefficients: #> (Intercept)            x   #>   -0.006511     0.039135   #>  #>  #> [[2]] #>  #> Call: #> lm(formula = formula, data = data) #>  #> Coefficients: #> (Intercept)            x   #>    -0.01489     -0.06217   #>  #>   # Extract model summaries in parallel models <- fmapn(list(formula = formulas, data = data_list), function(formula, data) {   summary(lm(formula, data = data))$r.squared })"},{"path":"/reference/fmapr.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function row-wise on a data frame with parallelism — fmapr","title":"Apply a function row-wise on a data frame with parallelism — fmapr","text":"Applies function `.f` row data frame `.df`, optional parallelism progress bar. row converted named list passed `.f`, enabling flexible access variables name.","code":""},{"path":"/reference/fmapr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function row-wise on a data frame with parallelism — fmapr","text":"","code":"fmapr(.df, .f, ncores = NULL, pb = FALSE, ...)"},{"path":"/reference/fmapr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function row-wise on a data frame with parallelism — fmapr","text":".df data frame whose rows iterated . .f function applied row, receives named list. ncores Integer. Number cores use parallel processing. Default `NULL` (sequential). pb Logical. Whether display progress bar. Default `FALSE`. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/fmapr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function row-wise on a data frame with parallelism — fmapr","text":"list results returned applying `.f` row list.","code":""},{"path":"/reference/fmapr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function row-wise on a data frame with parallelism — fmapr","text":"","code":"df <- data.frame(name = c(\"Mister\", \"Hipster\"), age = c(30, 25))  # Create personalized messages fmapr(df, function(row) paste(row$name, \"is\", row$age, \"years old\")) #> $`1` #> [1] \"Mister is 30 years old\" #>  #> $`2` #> [1] \"Hipster is 25 years old\" #>   # Row-wise model formulas formulas <- data.frame(   response = c(\"y1\", \"y2\"),   predictor = c(\"x1\", \"x2\"),   stringsAsFactors = FALSE )  fmapr(formulas, function(row) {   reformulate(row$predictor, row$response) }) #> $`1` #> y1 ~ x1 #> <environment: 0x55cac227e720> #>  #> $`2` #> y2 ~ x2 #> <environment: 0x55cac21c34c0> #>"},{"path":"/reference/freduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional reduce — freduce","title":"Functional reduce — freduce","text":"Apply binary function iteratively list vector, reducing single value sequence intermediate results. wrapper around [Reduce()] supports optional initial values, right--left evaluation, accumulation intermediate steps, output simplification.","code":""},{"path":"/reference/freduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional reduce — freduce","text":"","code":"freduce(   .x,   .f,   .init = NULL,   .right = FALSE,   .accumulate = FALSE,   .simplify = TRUE )"},{"path":"/reference/freduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional reduce — freduce","text":".x vector list reduce. .f binary function apply. Can given function quoted (e.g., `\\`+\\“). .init Optional initial value passed [Reduce()]. `NULL`, reduction starts first two elements. .right Logical. `TRUE`, reduction performed right left. .accumulate Logical. `TRUE`, returns list intermediate results (like scan). .simplify Logical. `TRUE` intermediate results length 1, output simplified vector.","code":""},{"path":"/reference/freduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional reduce — freduce","text":"single value (default) list/vector intermediate results `.accumulate = TRUE`.","code":""},{"path":"/reference/freduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional reduce — freduce","text":"","code":"freduce(1:5, `+`)                          # => 15 #> [1] 15 freduce(letters[1:4], paste0)             # => \"abcd\" #> [1] \"abcd\" freduce(list(1, 2, 3), `*`)               # => 6 #> [1] 6 freduce(1:3, `+`, .init = 10)             # => 16 #> [1] 16 freduce(1:3, paste0, .right = TRUE)       # => \"321\" #> [1] \"123\" freduce(1:4, `+`, .accumulate = TRUE)     # => c(1, 3, 6, 10) #> [1]  1  3  6 10"},{"path":"/reference/frepeat.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeat an expression or function call multiple times — frepeat","title":"Repeat an expression or function call multiple times — frepeat","text":"Repeats expression function evaluation `times` times. `expr` function, invoked optional input `.x` additional arguments. `expr` quoted expression, evaluated parent environment. Supports parallel processing optional simplification results.","code":""},{"path":"/reference/frepeat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeat an expression or function call multiple times — frepeat","text":"","code":"frepeat(   .x = NULL,   times,   expr,   simplify = FALSE,   ncores = NULL,   pb = FALSE,   ... )"},{"path":"/reference/frepeat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeat an expression or function call multiple times — frepeat","text":".x Optional input passed `expr` `expr` function. Default `NULL`. times Integer. Number repetitions. expr function unevaluated expression repeat. function, called `times` times. simplify Logical. `TRUE`, attempts simplify result using `simplify2array()`. Default `FALSE`. ncores Integer. Number cores use parallel execution. Default `NULL` (sequential). pb Logical. Whether display progress bar. Default `FALSE`. ... Additional arguments passed function `expr` callable.","code":""},{"path":"/reference/frepeat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeat an expression or function call multiple times — frepeat","text":"list outputs (simplified array `simplify = TRUE`) evaluating `expr` multiple times.","code":""},{"path":"/reference/frepeat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Repeat an expression or function call multiple times — frepeat","text":"`expr` passed function call (function quoted expression), evaluated immediately, repeated. Use `function(...) \\ ... \\` `quote(...)` instead..","code":""},{"path":"/reference/frepeat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeat an expression or function call multiple times — frepeat","text":"","code":"# Repeat a pure function call frepeat(times = 3, expr = function() rnorm(1)) #> [[1]] #> [1] 0.3206011 #>  #> [[2]] #> [1] -1.369776 #>  #> [[3]] #> [1] 0.2912297 #>   # Repeat a function with input `.x` frepeat(.x = 10, times = 3, expr = function(x) rnorm(1, mean = x)) #> [[1]] #> [1] 11.38555 #>  #> [[2]] #> [1] 10.16905 #>  #> [[3]] #> [1] 11.06892 #>   # Repeat an unevaluated expression (evaluated with `eval()`) frepeat(times = 2, expr = quote(rnorm(1))) #> [[1]] #> [1] -1.585889 #>  #> [[2]] #> [1] -0.3838501 #>   # Simplify the output to an array frepeat(times = 3, expr = function() rnorm(1), simplify = TRUE) #> [1]  0.8648344  0.5612503 -1.4398371  # Monte Carlo simulation: estimate coverage of a 95% CI for sample mean mc_result <- frepeat(times = 1000, simplify = TRUE, pb = TRUE, ncores = 1,expr = function() {   sample <- rnorm(30, mean = 0, sd = 1)   ci <- t.test(sample)$conf.int   mean(ci[1] <= 0 & 0 <= ci[2])  # check if true mean is inside the interval }) #>   |                                                  |   0% elapsed=00h 00m 00s, remaining~...  |                                                  |   1% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=                                                 |   2% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=                                                 |   3% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==                                                |   4% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==                                                |   5% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===                                               |   6% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===                                               |   7% elapsed=00h 00m 00s, remaining~00h 00m 00s  |====                                              |   8% elapsed=00h 00m 00s, remaining~00h 00m 00s  |====                                              |   9% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=====                                             |  10% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=====                                             |  11% elapsed=00h 00m 00s, remaining~00h 00m 00s  |======                                            |  12% elapsed=00h 00m 00s, remaining~00h 00m 00s  |======                                            |  13% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=======                                           |  14% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=======                                           |  15% elapsed=00h 00m 00s, remaining~00h 00m 00s  |========                                          |  16% elapsed=00h 00m 00s, remaining~00h 00m 00s  |========                                          |  17% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=========                                         |  18% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=========                                         |  19% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==========                                        |  20% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==========                                        |  21% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===========                                       |  22% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===========                                       |  23% elapsed=00h 00m 00s, remaining~00h 00m 00s  |============                                      |  24% elapsed=00h 00m 00s, remaining~00h 00m 00s  |============                                      |  25% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=============                                     |  26% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=============                                     |  27% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==============                                    |  28% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==============                                    |  29% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===============                                   |  30% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===============                                   |  31% elapsed=00h 00m 00s, remaining~00h 00m 00s  |================                                  |  32% elapsed=00h 00m 00s, remaining~00h 00m 00s  |================                                  |  33% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=================                                 |  34% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=================                                 |  35% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==================                                |  36% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==================                                |  37% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===================                               |  38% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===================                               |  39% elapsed=00h 00m 00s, remaining~00h 00m 00s  |====================                              |  40% elapsed=00h 00m 00s, remaining~00h 00m 00s  |====================                              |  41% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=====================                             |  42% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=====================                             |  43% elapsed=00h 00m 00s, remaining~00h 00m 00s  |======================                            |  44% elapsed=00h 00m 00s, remaining~00h 00m 00s  |======================                            |  45% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=======================                           |  46% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=======================                           |  47% elapsed=00h 00m 00s, remaining~00h 00m 00s  |========================                          |  48% elapsed=00h 00m 00s, remaining~00h 00m 00s  |========================                          |  49% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=========================                         |  50% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=========================                         |  51% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==========================                        |  52% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==========================                        |  53% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===========================                       |  54% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===========================                       |  55% elapsed=00h 00m 00s, remaining~00h 00m 00s  |============================                      |  56% elapsed=00h 00m 00s, remaining~00h 00m 00s  |============================                      |  57% elapsed=00h 00m 00s, remaining~00h 00m 00s  |============================                      |  58% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=============================                     |  59% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==============================                    |  60% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==============================                    |  61% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===============================                   |  62% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===============================                   |  63% elapsed=00h 00m 00s, remaining~00h 00m 00s  |================================                  |  64% elapsed=00h 00m 00s, remaining~00h 00m 00s  |================================                  |  65% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=================================                 |  66% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=================================                 |  67% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==================================                |  68% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==================================                |  69% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===================================               |  70% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===================================               |  71% elapsed=00h 00m 00s, remaining~00h 00m 00s  |====================================              |  72% elapsed=00h 00m 00s, remaining~00h 00m 00s  |====================================              |  73% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=====================================             |  74% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=====================================             |  75% elapsed=00h 00m 00s, remaining~00h 00m 00s  |======================================            |  76% elapsed=00h 00m 00s, remaining~00h 00m 00s  |======================================            |  77% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=======================================           |  78% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=======================================           |  79% elapsed=00h 00m 00s, remaining~00h 00m 00s  |========================================          |  80% elapsed=00h 00m 00s, remaining~00h 00m 00s  |========================================          |  81% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=========================================         |  82% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=========================================         |  83% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==========================================        |  84% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==========================================        |  85% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===========================================       |  86% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===========================================       |  87% elapsed=00h 00m 00s, remaining~00h 00m 00s  |============================================      |  88% elapsed=00h 00m 00s, remaining~00h 00m 00s  |============================================      |  89% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=============================================     |  90% elapsed=00h 00m 00s, remaining~00h 00m 00s  |=============================================     |  91% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==============================================    |  92% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==============================================    |  93% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===============================================   |  94% elapsed=00h 00m 00s, remaining~00h 00m 00s  |===============================================   |  95% elapsed=00h 00m 00s, remaining~00h 00m 00s  |================================================  |  96% elapsed=00h 00m 00s, remaining~00h 00m 00s  |================================================  |  97% elapsed=00h 00m 00s, remaining~00h 00m 00s  |================================================= |  98% elapsed=00h 00m 00s, remaining~00h 00m 00s  |================================================= |  99% elapsed=00h 00m 00s, remaining~00h 00m 00s  |==================================================| 100% elapsed=00h 00m 00s, remaining~00h 00m 00s mean(mc_result)  # estimated coverage #> [1] 0.946"},{"path":"/reference/funr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"funr: Functional programming with parallelism in R — funr-package","title":"funr: Functional programming with parallelism in R — funr-package","text":"package provides consistent intuitive API applying functions lists, vectors, data frames, built-support parallelism progress bars.","code":""},{"path":"/reference/funr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"funr: Functional programming with parallelism in R — funr-package","text":"Maintainer: Imad EL BADISY elbadisyimad@gmail.com","code":""},{"path":"/reference/fwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Walk over a vector or list with side effects — fwalk","title":"Walk over a vector or list with side effects — fwalk","text":"Applies function `.f` element `.x`, typically side effects (e.g., printing, writing files). function side-effect-friendly equivalent `fmap()`. Supports parallel execution progress bar display.","code":""},{"path":"/reference/fwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Walk over a vector or list with side effects — fwalk","text":"","code":"fwalk(.x, .f, ncores = NULL, pb = FALSE, ...)"},{"path":"/reference/fwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Walk over a vector or list with side effects — fwalk","text":".x list atomic vector elements iterate . .f function apply element `.x`. called primarily side effects. ncores Integer. Number cores use parallel processing. Default `NULL` (sequential). pb Logical. Whether show progress bar. Default `FALSE`. ... Additional arguments passed `.f`.","code":""},{"path":"/reference/fwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Walk over a vector or list with side effects — fwalk","text":"Invisibly returns `.x`, like `purrr::walk()`.","code":""},{"path":"/reference/fwalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Walk over a vector or list with side effects — fwalk","text":"","code":"# Print each element fwalk(1:3, print) #> [1] 1 #> [1] 2 #> [1] 3  # Simulate writing files in parallel if (FALSE) { # \\dontrun{ fwalk(1:3, function(i) {   cat(paste(\"Processing item\", i, \"\\n\"))   Sys.sleep(0.5) }, ncores = 2, pb = TRUE) } # }"}]
