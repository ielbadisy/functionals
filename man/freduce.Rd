% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/freduce.R
\name{freduce}
\alias{freduce}
\title{Functional reduce}
\usage{
freduce(.x, .f, .init = NULL, .right = FALSE)
}
\arguments{
\item{.x}{A vector or list of elements to reduce.}

\item{.f}{A binary function to apply. Can be specified as a function or a function name (e.g., `\`+\``).}

\item{.init}{An optional initial value to start the reduction. If `NULL`, reduction begins with the first two elements of `.x`.}

\item{.right}{Logical. If `FALSE` (default), reduction proceeds left-to-right. If `TRUE`, right-to-left reduction is used.}
}
\value{
The result of reducing `.x` using `.f`, optionally starting from `.init`.
}
\description{
Apply a binary function iteratively over a list or vector, reducing it to a single value.
This is a functional programming wrapper around [Reduce()] with support for left-to-right
and right-to-left reduction and an optional initial value.
}
\examples{
freduce(1:5, `+`)                          # Sum: 1 + 2 + 3 + 4 + 5 = 15
freduce(letters[1:4], paste0)             # Concatenate: "abcd"
freduce(list(1, 2, 3), `*`)               # Product: 1 * 2 * 3 = 6
freduce(1:3, `+`, .init = 10)             # Sum with initial value: 10 + 1 + 2 + 3 = 16
freduce(1:3, paste0, .right = TRUE)       # Right-to-left: paste0(1, paste0(2, 3)) = "123"

}
